from airflow import DAG
from airflow.operators.python import PythonOperator
from datetime import datetime
import json
import pandas as pd
import sqlalchemy as sa

# Configuración de la base de datos
DB_CONNECTION = 'postgresql://postgres:test1234@host.docker.internal:5435/postgres'
engine = sa.create_engine(DB_CONNECTION)

# Ruta del archivo JSON
RUTA_ARCHIVO = r"opt/airflow/dags/data/facturas_repetidas_4.json"

# Función para leer y procesar el archivo JSON
def procesar_json():
    facturas = []

    # Leer todo el JSON
    with open(RUTA_ARCHIVO, 'r', encoding='utf-8') as f:
        datos = json.load(f)

    # Procesar los datos
    for item in datos:
        if 'FACUPLOADMQ' in item and 'Factura' in item['FACUPLOADMQ'] and item['FACUPLOADMQ']['Factura']:
            for factura in item['FACUPLOADMQ']['Factura']:
                factura['RazonSocialProveedor'] = item['FACUPLOADMQ'].get('RazonSocialProveedor', '')
                factura['RucProveedor'] = item['FACUPLOADMQ'].get('RucProveedor', '')
                facturas.append(factura)

    # Convertir a pandas DataFrame
    pandas_df = pd.DataFrame(facturas)

    # Convertir columnas con diccionarios o listas a JSON
    columnas_a_convertir = ['ItemFactura', 'Archivos']
    for columna in columnas_a_convertir:
        if columna in pandas_df.columns:
            pandas_df[columna] = pandas_df[columna].apply(json.dumps)

    # Guardar el DataFrame en la base de datos
    pandas_df.to_sql('facturas_4', engine, if_exists='append', index=False, chunksize=1000)

# Definir el DAG
default_args = {
    'owner': 'airflow',
    'depends_on_past': False,
    'start_date': datetime(2025, 4, 25, 10, 50),
    'retries': 1,
}

with DAG(
    'procesar_facturas_dag_4',
    default_args=default_args,
    description='DAG para procesar facturas desde un archivo JSON y cargarlas en PostgreSQL',
    schedule= '*/10 * * * *',  # Cambiar según la frecuencia deseada
    catchup=False,
) as dag:

    for i in range(1, 3):
        procesar_facturas_task = PythonOperator(
            task_id=f'procesar_facturas_{i}',
            python_callable=procesar_json,
        )

        procesar_facturas_task